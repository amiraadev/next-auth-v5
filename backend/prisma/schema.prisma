// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
  WORKER
}

enum WorkerStatus {
  ACTIVE
  SUSPENDED
}

model User {
  id                    String                 @id @default(uuid())
  firstName             String
  familyName            String
  phoneNumber           String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  ownedStores           Store[]
  password              String
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  hashedRefToken        String                 @default("")
  role                  Role                   @default(CLIENT)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  // notifications Notification[]
  workIn                Store[]                @relation("UserStores")
  managedStores         Store[]                @relation("ManagerStores")

  @@unique([firstName, familyName])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Store {
  id        String     @id @default(uuid())
  name      String
  companyId String? // Make this field nullable
  company   Company?   @relation(fields: [companyId], references: [id])
  address   String?
  website   String?
  city      String?
  ownerId   String
  owner     User       @relation(fields: [ownerId], references: [id])
  workers   User[]     @relation("UserStores")
  managerId String?
  manager   User?      @relation("ManagerStores", fields: [managerId], references: [id])
  inventory Inventory?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Company {
  id            String  @id @default(uuid())
  name          String
  stores        Store[]
  websiteLink   String  @unique
  logo          String
  state         String
  city          String
  streetAddress String
}

model Inventory {
  id             Int            @id @default(autoincrement())
  name           String
  wareHouse      String
  template       String
  quantity       Int
  StoreId        String         @unique
  Store          Store          @relation(fields: [StoreId], references: [id])
  subInventories SubInventory[]
}

model SubInventory {
  id          String    @id @default(uuid())
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId Int
  name        String
  file        String
}
